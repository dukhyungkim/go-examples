// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package sample

import (
	"context"
)

const getActor = `-- name: GetActor :one
SELECT actor_id, first_name, last_name, last_update FROM actor
WHERE actor_id = $1 LIMIT 1
`

func (q *Queries) GetActor(ctx context.Context, actorID int32) (Actor, error) {
	row := q.db.QueryRowContext(ctx, getActor, actorID)
	var i Actor
	err := row.Scan(
		&i.ActorID,
		&i.FirstName,
		&i.LastName,
		&i.LastUpdate,
	)
	return i, err
}

const listActors = `-- name: ListActors :many
SELECT actor_id, first_name, last_name, last_update FROM actor
ORDER BY actor_id
LIMIT $1 OFFSET $2
`

type ListActorsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListActors(ctx context.Context, arg ListActorsParams) ([]Actor, error) {
	rows, err := q.db.QueryContext(ctx, listActors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Actor
	for rows.Next() {
		var i Actor
		if err := rows.Scan(
			&i.ActorID,
			&i.FirstName,
			&i.LastName,
			&i.LastUpdate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllActors = `-- name: ListAllActors :many
SELECT actor_id, first_name, last_name, last_update FROM actor
ORDER BY actor_id
`

func (q *Queries) ListAllActors(ctx context.Context) ([]Actor, error) {
	rows, err := q.db.QueryContext(ctx, listAllActors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Actor
	for rows.Next() {
		var i Actor
		if err := rows.Scan(
			&i.ActorID,
			&i.FirstName,
			&i.LastName,
			&i.LastUpdate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
